using System;
using Microsoft.Xna.Framework;

namespace ZombustersWindows
{
    /// <summary>
    /// This is just a static helper class to quickly fill a texture2D with values
    /// generated by the perlin noise function (CPU).
    /// </summary>
    public static class CreateTexture
    {
        static Random _rand = new Random(42);

        /// <summary>
        /// Fills a colour array with perlin noise values using a fractal Brownian motion (fBm)
        /// function.  The colour array is returned.
        /// </summary>
        /// <param name="width">width of texture2d.</param>
        /// <param name="height">height of texture2d.</param>
        /// <returns>A colour array of values.</returns>
        public static Color[] FillAsfBmHeightmap(int width, int height)
        {
            Color[] data = new Color[width * height];
            float tempColor;

            // We will modify these coords in the loop.
            float x = 0, y = 0, z = 0;

            for (int v = 0; v < width; v++)
            {
                x += 0.5f;
                y = 0;
                for (int u = 0; u < height; u++)
                {
                    tempColor = (float)c3DPerlinNoise.fBm(x, y, z, 8, 0.45f, 1.0f);
                    data[v * width + u] = new Color(tempColor, tempColor, tempColor, 1);

                    y += 0.5f;
                }
            }

            return data;
        }

        public static Color[] FillNoise(int width, int height, float diffuse)
        {
            Color[] data = new Color[width * height];
            float tempColor;

            // We will modify these coords in the loop.
            float x = 0, y = 0, z = 0;

            for (int v = 0; v < width; v++)
            {
                x += diffuse;
                y = 0;
                for (int u = 0; u < height; u++)
                {
                    tempColor = (float)c3DPerlinNoise.noise(x, y, z);
                    data[v * width + u] = new Color(tempColor, tempColor, tempColor, 1);

                    y += diffuse;
                }
            }

            return data;
        }

        /// <summary>
        /// Fills a colour array with perlin noise values using a ridged multifractal
        /// function.  The colour array is returned.
        /// </summary>
        /// <param name="width">width of texture2d.</param>
        /// <param name="height">height of texture2d.</param>
        /// <returns>A colour array of values.</returns>
        public static Microsoft.Xna.Framework.Color[] FillAsRidgedMFHeightmap(int width, int height)
        {
            Color[] data = new Color[width * height];
            float tempColor;

            // We will modify these coords in the loop.
            float x = 0, y = 0, z = 0;

            for (int v = 0; v < width; v++)
            {
                x += 0.005f;
                y = 0;
                for (int u = 0; u < height; u++)
                {
                    tempColor = (float)c3DPerlinNoise.RidgedMF(x, y, z, 16, 2.85f, 0.45f, 1.0f);
                    data[v * width + u] = new Color(tempColor, tempColor, tempColor, 1);

                    y += 0.005f;
                }
            }

            return data;
        }
    }
}
